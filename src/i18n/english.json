{
  "product_name": "Processor\u00A0Logic\u00A0Visualizer",
  "app": {
    "change_debug_mode": "Change Debug Mode"
  },
  "word": {
    "and_gate": "AND Gate",
    "and_gate_full_name": "AND Gate",
    "or_gate": "OR Gate",
    "or_gate_full_name": "OR Gate",
    "not_gate": "NOT Gate",
    "not_gate_full_name": "NOT Gate",
    "nand_gate": "NAND Gate",
    "nand_gate_full_name": "NAND Gate",
    "nor_gate": "NOR Gate",
    "nor_gate_full_name": "NOR Gate",
    "xor_gate": "XOR Gate",
    "xor_gate_full_name": "XOR Gate",
    "xnor_gate": "XNOR Gate",
    "xnor_gate_full_name": "XNOR Gate"
  },
  "home_page": {
    "title": "Welcom to {product_name}!",
    "you_can_learn": "At this site, you can learn about...",
    "gate": {
      "title": "Logic Gates",
      "subtitle": "The fundamental units of digital circuits, controlling signal flow and performing basic logic operations.",
      "content": "In this section, you can explore the working principles of common logic gates such as AND, OR, NOT, NAND, NOR, XOR and XNOR."
    },
    "flip_flop": {
      "title": "Flip-Flops",
      "subtitle": "The core elements of sequential circuits, used for storing and controlling signal states.",
      "content": "This section showcases various flip-flops (e.g., RS, D, JK, T) and their state transition rules, as well as their applications in circuits."
    },
    "digital_circuit": {
      "title": "Digital Circuits",
      "subtitle": "A combination of logic gates and flip-flops that enables precise signal transmission and complex functionality.",
      "content": "This section introduces components like registers and counters, explaining their roles in circuit design."
    },
    "cpu": {
      "title": "CPU Execution Process",
      "subtitle": "The pinnacle of digital circuits, performing instruction execution through logic operations and signal coordination.",
      "content": "This section simulates the CPU architecture and key processes such as fetch, decode, execute, and store, highlighting its internal collaboration mechanisms."
    },
    "next_page": "Let's Start!",
    "disclaimer": "Some\u00A0images\u00A0and\u00A0texts\u00A0on\u00A0this\u00A0website\u00A0are\u00A0generated\u00A0by\u00A0AI and\u00A0are\u00A0intended\u00A0for\u00A0educational and\u00A0reference\u00A0purposes\u00A0only. Please\u00A0understand\u00A0that\u00A0there\u00A0may\u00A0be\u00A0inaccuracies, and\u00A0actual\u00A0conditions\u00A0should\u00A0take\u00A0precedence."
  },
  "menu_page": {
    "menu": "Menu",
    "menu_beginning": {
      "title": "The Beginning",
      "switches": "Switches",
      "claude_shannon": "A Symbolic Analysis of Relay and Switching Circuits"
    },
    "menu_logic_gates_base": {
      "title": "Logic Gates - Base Section",
      "and_gate": "AND Gate",
      "or_gate": "OR Gate",
      "not_gate": "NOT Gate",
      "summary": "Summary of Base Logic Gates"
    },
    "menu_logic_gates_advance": {
      "title": "Logic Gates - Advanced Section",
      "nand_gate": "NAND Gate",
      "nor_gate": "NOR Gate",
      "xor_gate": "XOR Gate",
      "xnor_gate": "XNOR Gate",
      "summary": "Summary of Advanced Logic Gates"
    },
    "menu_digital_circuits_base": {
      "title": "Digital Circuits - Base Section",
      "half_adder": "Half Adder",
      "full_adder": "Full Adder"
    },
    "menu_flip_flops": {
      "title": "Flip-Flops",
      "rs_ff": "RS(Reset-Set) Flip-Flops",
      "d_ff": "D(Data / Delay) Flip-Flop",
      "jk_ff": "JK Flip-Flop",
      "t_ff": "T(Toggle) Flip-Flop",
      "et_ff": "Edge-Triggered Flip-Flop"
    },
    "menu_digital_circuits_advance": {
      "title": "Digital Circuits - Advanced Section",
      "latch": "Latches",
      "rwm": "Read Write Memory",
      "ram": "Random Access Memory",
      "fd": "Frequency Divider",
      "counter": "Counter"
    },
    "menu_cpu": {
      "title": "CPU(Central Processing Unit)",
      "excution_components": "Distinguishing Components in the Simulation",
      "cpu_excution_simulation": "CPU Execution Simulation"
    }
  },
  "switches_page": {
    "title": "Switch",
    "switch_on": "ON",
    "switch_off": "OFF",
    "explain": "The world of computers is actually quite simple. It only recognizes two numbers: 0 and 1, much like the two opposing ideas in philosophy - 1 represents 'yes', and 0 represents 'no'. In terms of the underlying structure of a computer, 0 means the switch is off, and 1 means the switch is on.",
    "next_section": "Next section"
  },
  "claude_shannon_page": {
    "title": "A Symbolic Analysis of Relay and Switching Circuits",
    "source_tip": "This image is from Claude\u00A0Shannon's Wikipedia\u00A0page",
    "who_am_i": "Who am i?",
    "claude_shannon": "Claude Elwood Shannon",
    "born": "Born on {born_on}",
    "born_on": "April 30, 1916",
    "died": "Died on {died_in}",
    "died_on": "February 24, 2001",
    "aged": "Aged 84",
    "introduce": "If we want a computer to perform calculations, we need to establish logical relationships through switching circuits. The connection between switching circuits and logic was first established by Claude Elwood Shannon (hereafter referred to as 'Shannon'). In 1937, in his master's thesis at MIT, Shannon concluded that electronic switches could be connected in various ways to perform any logical function. This is considered one of the most influential master's theses in history. In his thesis, Shannon demonstrated that switches could be combined in different ways to execute simple logical operations, and these combinations of switches are called logic gates. The most basic logic gates that make up a computer are AND, OR, and NOT gates. Let's now take a closer look at these logic gates...",
    "reveal": "Reveal",
    "next_section": "Next section"
  },
  "and_gate_page": {
    "title": "AND Gate",
    "explain": "An AND gate connects two switches in series, and the output is activated (1) only when both input switches are turned on (1). If either input is off, the output remains inactive (0). This logical relationship is represented by the truth table below:",
    "next_section": "Next Section"
  },
  "or_gate_page": {
    "title": "OR Gate",
    "explain": "An OR gate connects two switches in parallel, and the output is activated (1) as long as at least one input switch is turned on (1). The output will only remain inactive (0) when both inputs are off. This logical relationship is represented by the truth table below:",
    "next_section": "Next Section"
  },
  "not_gate_page": {
    "title": "NOT Gate",
    "explain": "A NOT gate inverts the input signal. When the input switch is on (1), the output is inactive (0). When the input is off (0), the output becomes active (1). This logical relationship is represented by the truth table below:",
    "next_section": "Next Section"
  },
  "logic_gates_base_summary": {
    "title": "Summary of Base Logic Gates",
    "explain": "The previously covered chapters introduced the AND, OR, and NOT gates, which are the fundamental building blocks of logic circuits. By combining these basic gates, we can create a wide range of more complex logic circuits. For example, the gates we’ll explore next—NAND, NOR, XOR, and XNOR—are all constructed from combinations of these basics. Even more advanced components like flip-flops, half adders, and full adders are built upon these foundational gate structures.",
    "next_section": "Next section"
  },
  "nand_gate_page": {
    "title": "NAND Gate",
    "explain": "A NAND gate is the inverse of an AND gate. When both input switches are on (1), the output is inactive (0). In all other cases—when at least one input is off—the output is active (1). This logical relationship is represented by the truth table below:",
    "next_section": "Next Section"
  },
  "nor_gate_page": {
    "title": "NOR Gate",
    "explain": "A NOR gate is the inverse of an OR gate. When both input switches are off (0), the output is active (1). If either input is on, the output remains inactive (0). This logical relationship is represented by the truth table below:",
    "next_section": "Next Section"
  },
  "xor_gate_page": {
    "title": "XOR Gate",
    "explain": "An XOR gate outputs 1 when the two input switches are in opposite states. If both inputs are the same, the output is 0. This logical relationship is represented by the truth table below:",
    "next_section": "Next Section"
  },
  "xnor_gate_page": {
    "title": "XNOR Gate",
    "explain": "An XNOR gate, also known as an Exclusive-NOR gate, outputs 1 when both input switches are in the same state. If the inputs are different, the output is 0. This logical relationship is represented by the truth table below:",
    "next_section": "Next Section"
  },
  "logic_gates_advanced_summary": {
    "title": "Summary of Advanced Logic Gates",
    "explain": "The four gates we've just covered—NAND, NOR, XOR, and XNOR—are considered advanced logic gates. By combining them, we can build even more complex logic circuits. For example, the circuits we'll explore next—such as flip-flops, half adders, and full adders—are all constructed using combinations of these advanced gates.",
    "next_section": "Next Section"
  },
  "half_adder_page": {
    "title": "Half Adder",
    "explain": "Half Adder's explain text placeholder ... Half Adder's explain text placeholder ... Half Adder's explain text placeholder ... Half Adder's explain text placeholder ... Half Adder's explain text placeholder ... Half Adder's explain text placeholder ... Half Adder's explain text placeholder ... Half Adder's explain text placeholder ... ",
    "next_section": "Next Section"
  },

  "recommend_aspect_ratio_dialog": {
    "title": "Sorry...",
    "content": "<span>The current screen resolution ratio of your device may affect the display quality of this page.<br/>For the best experience, please ensure your screen resolution ratio is greater than 4:3.<br/><br/>Here are some suggestions to resolve the issue:<br/>1. <span class=\"b\">Use a larger device</span>: If you're on a small mobile device, consider switching to a computer or a larger tablet for an improved viewing experience.<br/>2. <span class=\"b\">Adjust foldable devices</span>: If you're using a foldable device, try unfolding it to increase the screen size.<br/>3. <span class=\"b\">Rotate your tablet</span>: For tablet users, disable screen rotation lock and switch to landscape mode for optimal display.<br/>4. <span class=\"b\">Check your computer or laptop</span>: If you're using a laptop or desktop computer and still seeing this message, congratulations! You may have unlocked some hidden “skill.” We recommend using the project as intended for the best results.<br/><br/>If you'd like to report an issue or provide feedback, feel free to submit an Issue on the project's GitHub page. We'll address it as soon as possible.</span>"
  }
}
